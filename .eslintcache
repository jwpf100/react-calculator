[{"/Users/josephfletcher/dev/react-projects/calculator/src/index.js":"1","/Users/josephfletcher/dev/react-projects/calculator/src/reportWebVitals.js":"2"},{"size":4693,"mtime":1609953745423,"results":"3","hashOfConfig":"4"},{"size":362,"mtime":1608310232949,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8","usedDeprecatedRules":"9"},"1fmvp1j",{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"/Users/josephfletcher/dev/react-projects/calculator/src/index.js",["13"],"import React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nfunction Display(props) {\n  let className = 'standard display'\n  return (\n    <div className={className}>\n      <div>{props.message}</div>\n    </div>\n  )\n}\n\nfunction Button(props) {\n  let className = 'standard button'\n  const handleClick = () => props.onClickFunction(props.value);\n  return (\n    <div onClick={handleClick} className={className}>\n      {props.value}\n    </div>\n  )\n}\n\nfunction Calculator() {\n\n   //Initialise the State\n  \n  const [newOperand, setNewOperand] = useState([0]);\n  const [operator, setNewOperator] = useState('');\n  const [operand, setOperand] = useState('');\n  const [display, setDisplay] = useState([0]);\n  const [lastClicked, setLastClicked] = useState('number');\n \n\n  //Computations Based On State\n\n  //setState\n\n  const setNumberInput = (displayValue) => {\n    setNewOperand(displayValue)\n    setDisplay(displayValue)\n    setLastClicked('number')\n  }\n\n  //test this\n\n  const calculatorStatus = lastClicked === 'number' ? 'yes' : 'no';\n\n  const setCalculatorState = (displayValue, operatorValue) => {\n\n    console.log(calculatorStatus);\n    if (operatorValue === '=') {\n      setOperand(displayValue)\n      setDisplay(displayValue)\n      setNewOperand([])\n      setLastClicked('operator')\n    } else if (lastClicked === 'operator') {  \n      setNewOperator(operatorValue)\n    } else {\n    setNewOperator(operatorValue) \n    setOperand(displayValue)\n    setDisplay(displayValue)\n    setNewOperand([])\n    setLastClicked('operator')\n    }\n  }\n\n  \n  //Calculations\n\n  const utils = {\n  addition: (firstNum, secondNum) => firstNum + secondNum,\n  subtraction: (firstNum, secondNum) =>  firstNum - secondNum,\n  division: (firstNum, secondNum) => firstNum / secondNum,\n  multiplication: (firstNum, secondNum) => firstNum * secondNum,\n  }\n\n  //Perform Calculation\n\n  const performCalculation = (operatorValue) => {\n\n      let firstNumber = operand;\n      let secondNumber = parseInt(newOperand.join(''));\n      let result;\n\n      switch(operatorValue) {\n        case '+':\n          result = utils.addition(firstNumber, secondNumber)\n          break;\n        case '-':\n          result = utils.subtraction(firstNumber, secondNumber)\n          break;\n        case '/':\n          result = utils.division(firstNumber, secondNumber)\n          break;\n        case 'x':\n          result = utils.multiplication(firstNumber, secondNumber)\n          break;\n        default:\n          console.log('Error');\n    }\n\n    return result;\n  }\n\n  const digitClicked = (digitValue) => {\n    let newNumber = [...newOperand, digitValue];\n    setNumberInput(newNumber);\n  }\n\n  const operatorClicked = (operatorValue) => {\n    if ( operand.length === 0 ) {\n      let newDisplay = parseInt(newOperand.join(''));\n      setCalculatorState(newDisplay, operatorValue);\n    } else {\n      let newDisplay = performCalculation(operator);\n      setCalculatorState(newDisplay, operatorValue);\n    }\n  }\n\n  const inputClicked = (inputValue) => {\n    console.log(`Function key - ${inputValue}`)\n  }\n\n  return (\n    <div className='calculator-container'>\n      <Display message={display}/>\n      <Button onClickFunction = {inputClicked} value='AC'/>\n      <Button onClickFunction = {inputClicked} value='+/-'/>\n      <Button onClickFunction = {inputClicked} value='%'/>\n      <Button onClickFunction = {operatorClicked} value='/'/>\n      <Button onClickFunction = {digitClicked} value={7}/>\n      <Button onClickFunction = {digitClicked} value={8}/>\n      <Button onClickFunction = {digitClicked} value={9}/>\n      <Button onClickFunction = {operatorClicked} value='x'/>\n      <Button onClickFunction = {digitClicked} value={4}/>\n      <Button onClickFunction = {digitClicked} value={5}/>\n      <Button onClickFunction = {digitClicked} value={6}/>\n      <Button onClickFunction = {operatorClicked} value='-'/>\n      <Button onClickFunction = {digitClicked} value={1}/>\n      <Button onClickFunction = {digitClicked} value={2}/>\n      <Button onClickFunction = {digitClicked} value={3}/>\n      <Button onClickFunction = {operatorClicked} value='+'/>\n      <Button onClickFunction = {digitClicked} value={0}/>\n      <Button onClickFunction = {inputClicked} value='.'/>\n      <Button onClickFunction = {operatorClicked} value='='/>\n    </div>\n  )\n}\n\n  ReactDOM.render(<Calculator />, document.getElementById('root'))\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["14","15"],"/Users/josephfletcher/dev/react-projects/calculator/src/reportWebVitals.js",[],["16","17"],{"ruleId":"18","severity":1,"message":"19","line":1,"column":17,"nodeType":"20","messageId":"21","endLine":1,"endColumn":26},{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","replacedBy":"25"},{"ruleId":"22","replacedBy":"26"},{"ruleId":"24","replacedBy":"27"},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-native-reassign",["28"],"no-negated-in-lhs",["29"],["28"],["29"],"no-global-assign","no-unsafe-negation"]